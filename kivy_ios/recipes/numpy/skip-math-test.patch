diff -Naur numpy-1.24.2.orig/numpy/core/setup.py numpy-1.24.2/numpy/core/setup.py
--- numpy-1.24.2.orig/numpy/core/setup.py       2023-03-11 19:49:17
+++ numpy-1.24.2/numpy/core/setup.py    2023-03-11 19:51:42
@@ -429,27 +429,7 @@
 
 def check_mathlib(config_cmd):
     # Testing the C math library
-    mathlibs = []
-    mathlibs_choices = [[], ["m"], ["cpml"]]
-    mathlib = os.environ.get("MATHLIB")
-    if mathlib:
-        mathlibs_choices.insert(0, mathlib.split(","))
-    for libs in mathlibs_choices:
-        if config_cmd.check_func(
-            "log",
-            libraries=libs,
-            call_args="0",
-            decl="double log(double);",
-            call=True
-        ):
-            mathlibs = libs
-            break
-    else:
-        raise RuntimeError(
-            "math library missing; rerun setup.py after setting the "
-            "MATHLIB env variable"
-        )
-    return mathlibs
+    return ["m"]
 
 
 def visibility_define(config):
@@ -716,49 +696,7 @@
     subst_dict = dict([("sep", os.path.sep), ("pkgname", "numpy.core")])
 
     def get_mathlib_info(*args):
-        # Another ugly hack: the mathlib info is known once build_src is run,
-        # but we cannot use add_installed_pkg_config here either, so we only
-        # update the substitution dictionary during npymath build
-        config_cmd = config.get_config_cmd()
-        # Check that the toolchain works, to fail early if it doesn't
-        # (avoid late errors with MATHLIB which are confusing if the
-        # compiler does not work).
-        for lang, test_code, note in (
-            ('c', 'int main(void) { return 0;}', ''),
-            ('c++', (
-                    'int main(void)'
-                    '{ auto x = 0.0; return static_cast<int>(x); }'
-                ), (
-                    'note: A compiler with support for C++11 language '
-                    'features is required.'
-                )
-             ),
-        ):
-            is_cpp = lang == 'c++'
-            if is_cpp:
-                # this a workaround to get rid of invalid c++ flags
-                # without doing big changes to config.
-                # c tested first, compiler should be here
-                bk_c = config_cmd.compiler
-                config_cmd.compiler = bk_c.cxx_compiler()
-
-                # Check that Linux compiler actually support the default flags
-                if hasattr(config_cmd.compiler, 'compiler'):
-                    config_cmd.compiler.compiler.extend(NPY_CXX_FLAGS)
-                    config_cmd.compiler.compiler_so.extend(NPY_CXX_FLAGS)
-
-            st = config_cmd.try_link(test_code, lang=lang)
-            if not st:
-                # rerun the failing command in verbose mode
-                config_cmd.compiler.verbose = True
-                config_cmd.try_link(test_code, lang=lang)
-                raise RuntimeError(
-                    f"Broken toolchain: cannot link a simple {lang.upper()} "
-                    f"program. {note}"
-                )
-            if is_cpp:
-                config_cmd.compiler = bk_c
-        mlibs = check_mathlib(config_cmd)
+        mlibs = check_mathlib(None)
 
         posix_mlib = ' '.join(['-l%s' % l for l in mlibs])
         msvc_mlib = ' '.join(['%s.lib' % l for l in mlibs])