--- Python-3.11.6.orig/configure	2023-10-02 08:29:10
+++ Python-3.11.6/configure	2024-09-25 22:32:20
@@ -3823,6 +3823,15 @@
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
+  *-apple-ios)
+    ac_sys_system=iOS
+    ;;
+  *-apple-tvos)
+    ac_sys_system=tvOS
+    ;;
+  *-apple-watchos)
+    ac_sys_system=watchOS
+    ;;
 	*-*-vxworks*)
 	    ac_sys_system=VxWorks
 	    ;;
@@ -3876,6 +3885,15 @@
 			_host_cpu=$host_cpu
 		esac
 		;;
+  *-apple-*)
+    case "$host_cpu" in
+    arm*)
+        _host_cpu=arm
+        ;;
+    *)
+        _host_cpu=$host_cpu
+    esac
+    ;;
 	*-*-cygwin*)
 		_host_cpu=
 		;;
@@ -3956,6 +3974,13 @@
   Darwin/[6789].*)
     define_xopen_source=no;;
   Darwin/[12][0-9].*)
+    define_xopen_source=no;;
+  # On iOS, defining _POSIX_C_SOURCE also disables platform specific features.
+  iOS/*)
+    define_xopen_source=no;;
+  tvOS/*)
+    define_xopen_source=no;;
+  watchOS/*)
     define_xopen_source=no;;
   # On QNX 6.3.2, defining _XOPEN_SOURCE prevents netdb.h from
   # defining NI_NUMERICHOST.
@@ -6203,6 +6228,12 @@
 $as_echo_n "checking for multiarch... " >&6; }
 case $ac_sys_system in #(
   Darwin*) :
+    MULTIARCH="" ;; #(
+  iOS*) :
+    MULTIARCH="" ;; #(
+  tvOS*) :
+    MULTIARCH="" ;; #(
+  watchOS*) :
     MULTIARCH="" ;; #(
   FreeBSD*) :
     MULTIARCH="" ;; #(
@@ -7210,11 +7241,17 @@
 fi
 
 if test "$cross_compiling" = yes; then
-    case "$READELF" in
-	readelf|:)
-	as_fn_error $? "readelf for the host is required for cross builds" "$LINENO" 5
-	;;
-    esac
+    case "$host" in
+    *-apple-*os)
+        # readelf not required for iOS cross builds.
+        ;;
+    *)
+        case "$READELF" in
+            readelf|:)
+            as_fn_error $? "readelf for the host is required for cross builds" "$LINENO" 5
+            ;;
+        esac
+     esac
 fi
 
 
@@ -8259,7 +8296,7 @@
 # tweak BASECFLAGS based on compiler and platform
 case $GCC in
 yes)
-    CFLAGS_NODIST="$CFLAGS_NODIST -std=c11"
+    CFLAGS_NODIST="$CFLAGS_NODIST -std=c11" #
 
 
 
@@ -15157,6 +15194,10 @@
 then
 	case $ac_sys_system/$ac_sys_release in
 	hp*|HP*) DYNLOADFILE="dynload_hpux.o";;
+  # Dynamic loading on iOS
+  iOS/*) DYNLOADFILE="dynload_shlib.o";;
+  tvOS/*) DYNLOADFILE="dynload_shlib.o";;
+  watchOS/*) DYNLOADFILE="dynload_shlib.o";;
 	*)
 	# use dynload_shlib.c and dlopen() if we have it; otherwise stub
 	# out any dynamic loading
@@ -23443,45 +23484,46 @@
 
 if test "x$with_builtin_blake2" = xyes; then :
 
-
-pkg_failed=no
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for LIBB2" >&5
-$as_echo_n "checking for LIBB2... " >&6; }
-
-if test -n "$LIBB2_CFLAGS"; then
-    pkg_cv_LIBB2_CFLAGS="$LIBB2_CFLAGS"
- elif test -n "$PKG_CONFIG"; then
-    if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libb2\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "libb2") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then
-  pkg_cv_LIBB2_CFLAGS=`$PKG_CONFIG --cflags "libb2" 2>/dev/null`
-		      test "x$?" != "x0" && pkg_failed=yes
-else
-  pkg_failed=yes
-fi
- else
-    pkg_failed=untried
-fi
-if test -n "$LIBB2_LIBS"; then
-    pkg_cv_LIBB2_LIBS="$LIBB2_LIBS"
- elif test -n "$PKG_CONFIG"; then
-    if test -n "$PKG_CONFIG" && \
-    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libb2\""; } >&5
-  ($PKG_CONFIG --exists --print-errors "libb2") 2>&5
-  ac_status=$?
-  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
-  test $ac_status = 0; }; then
-  pkg_cv_LIBB2_LIBS=`$PKG_CONFIG --libs "libb2" 2>/dev/null`
-		      test "x$?" != "x0" && pkg_failed=yes
-else
-  pkg_failed=yes
-fi
- else
-    pkg_failed=untried
-fi
+# fix issue with libb2 on iOS
+pkg_failed=yes
+#pkg_failed=no
+#{ $as_echo "$as_me:${as_lineno-$LINENO}: checking for LIBB2" >&5
+#$as_echo_n "checking for LIBB2... " >&6; }
+#
+#if test -n "$LIBB2_CFLAGS"; then
+#    pkg_cv_LIBB2_CFLAGS="$LIBB2_CFLAGS"
+# elif test -n "$PKG_CONFIG"; then
+#    if test -n "$PKG_CONFIG" && \
+#    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libb2\""; } >&5
+#  ($PKG_CONFIG --exists --print-errors "libb2") 2>&5
+#  ac_status=$?
+#  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+#  test $ac_status = 0; }; then
+#  pkg_cv_LIBB2_CFLAGS=`$PKG_CONFIG --cflags "libb2" 2>/dev/null`
+#		      test "x$?" != "x0" && pkg_failed=yes
+#else
+#  pkg_failed=yes
+#fi
+# else
+#    pkg_failed=untried
+#fi
+#if test -n "$LIBB2_LIBS"; then
+#    pkg_cv_LIBB2_LIBS="$LIBB2_LIBS"
+# elif test -n "$PKG_CONFIG"; then
+#    if test -n "$PKG_CONFIG" && \
+#    { { $as_echo "$as_me:${as_lineno-$LINENO}: \$PKG_CONFIG --exists --print-errors \"libb2\""; } >&5
+#  ($PKG_CONFIG --exists --print-errors "libb2") 2>&5
+#  ac_status=$?
+#  $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
+#  test $ac_status = 0; }; then
+#  pkg_cv_LIBB2_LIBS=`$PKG_CONFIG --libs "libb2" 2>/dev/null`
+#		      test "x$?" != "x0" && pkg_failed=yes
+#else
+#  pkg_failed=yes
+#fi
+# else
+#    pkg_failed=untried
+#fi
 
 
 
